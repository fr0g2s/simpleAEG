from pwn import *
import angr

class ExploitGen:
    def __init__(self, arch, mitigate=['NX':False,'ASLR':False,'PIE':False,'RELRO':False]):
        self.arch = arch
        self.mitigate = mitigate
        self.exploit_tyep = self.__getExploitType__(mitigate)

    def __getExploitType__(self, miti):
        if miti['NX'] is False and miti['ASLR'] is False:
            return 'return-to-stack'    # use shellcode
        elif miti['NX'] is True and miti['ASLR'] is False:
            return 'return-to-libc' # use libc
        elif miti['NX'] is True and miti['ASLR'] is True and miti['PIE'] is False and miti['RELRO'] is False:
            return 'return-to-code' # use code
        else:
            return None # i don't know how to expoit

    def getExploit(self, crash, state):
        exp_type = self.exploit_type
        payload = ''

        if exp_type is 'return-to-stack':   # shellcode
            payload = self.__return2stack__(crash, state)    
        elif exp_type is 'return-to-libc':  # rtl
            payload = self.__return2libc__(crash, state)
        elif exp_type is 'return-to-code':  # rop
            payload = self.__return2code__(crash, state)

    def __return2stack__(self, crash, state):
        exp = ''
        if self.type == 'x86':
            sc = enhax(asm(shellcraft.linux.i386.sh()))
        elif self.type == 'AMD64':
            sc = enhax(asm(shellcraft.linux.amd64.sh()))

        return exp

    def __return2libc__(self, crash, state):
        exp = ''
        return exp

    def __return2code__(self, crash, state):
        exp = ''
        return exp


if __name__ == "__main__":
    pass
